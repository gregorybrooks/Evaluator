import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.*;

import javax.print.Doc;
import java.io.*;
import java.util.*;

/**
 * A query formulation consists of the queries generated by that formulator
 * for the requests in the analytic tasks file (queries),
 * and the results of running those queries (run).
 */
public class QueryFormulation {
    private static final int MAX_DOCIDS = 1000;  // number of hits to look at
    private static final String resultsFilesDirectory = Pathnames.runFileLocation;
    private static final String queriesFilesDirectory = Pathnames.queryFileLocation;
    public Map<String,String> queries;
    public Run run;
    public String queryFormulationName = "";
    QueryFormulation(String queryFormulation) throws IOException, ParseException {
        queries = getGeneratedQueries(queryFormulation);
        run = new Run(queryFormulation);
        queryFormulationName = queryFormulation;
    }

    public String getName() {
        return queryFormulationName;
    }

    public List<String> getDocids(String requestID, int size) {
        List<String> docids = run.requestRuns.get(requestID).docids;
        return docids.subList(0,size);
    }

    public String getDoc(String requestID, int whichDoc /* one-relative */) {
        List<String> docids = run.requestRuns.get(requestID).docids;
        String[] s1Docids = new String[docids.size()];
        s1Docids = docids.toArray(s1Docids);
        if (whichDoc < 0 || whichDoc > docids.size()) {
            return "Document not in the result set of " + docids.size() + " documents";
        }
        String docid = s1Docids[whichDoc-1];
        String doc = "";
        try {
            doc = Document.getDocument(docid);
        } catch (Exception e) {
            return "Document not found";
        }
        return doc;
    }

    public String getDocID(String requestID, int whichDoc /* one-relative */) {
        List<String> docids = run.requestRuns.get(requestID).docids;
        String[] s1Docids = new String[docids.size()];
        s1Docids = docids.toArray(s1Docids);
        if (whichDoc < 0 || whichDoc > docids.size()) {
            return "Document not in the result set of " + docids.size() + " documents";
        }
        String docid = s1Docids[whichDoc-1];
        return docid;
    }
    /**
     * Within the solution are multiple Tasks, and each Task has multiple Requests.
     * This class represents the results of running the query for a Request.
     */
    public class RequestRun {
        public String requestID;
        public List<String> docids;
        RequestRun(String requestID, List<String> docids) {
//            System.out.println(requestID + " has " + docids.size() + " docs");
            this.requestID = requestID;
            this.docids = docids;
        }
    }

    /**
     * Represents the results of a particular query formulation's Galago execution.
     */
    public class Run {
        public Map<String, RequestRun> requestRuns;
        public String name;
        /**
         * Reads in the file that was output from Galago's batch-search function,
         * which is the top x hits for each of the Requests in the input file.
         * @param queryFormulation The name of the query formulation, e.g. "CLEAR-1".
         */
        Run (String queryFormulation)  {
            name = queryFormulation;

            String fileName = resultsFilesDirectory + "dry-run-topics.auto." + queryFormulation + ".out";
            requestRuns = new HashMap<String, RequestRun>();
            List<String> docids = new ArrayList<>();
            try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
                String line;
                String prevQueryID = "NONE";
                int docidsAdded = 0;
                while ((line = br.readLine()) != null) {
                    String queryID = line.split("[ \t]+")[0];
                    if (!prevQueryID.equals(queryID)) {
                        if (!prevQueryID.equals("NONE")) {
                            // Clone the list
                            List<String> cloned_list
                                    = new ArrayList<String>(docids);
                            RequestRun r = new RequestRun(prevQueryID, cloned_list);
                            requestRuns.put(prevQueryID, r);
                            docids.clear();
                            docidsAdded = 0;
                        }
                    }
                    prevQueryID = queryID;
                    if (docidsAdded < MAX_DOCIDS) {
                        docids.add(line.split("[ \t]+")[2]); // doc ID is 3rd field
                        ++docidsAdded;
                    }
                }
                if (!prevQueryID.equalsIgnoreCase("")) {
                    // Clone the list
                    List<String> cloned_list
                            = new ArrayList<String>(docids);
                    RequestRun r = new RequestRun(prevQueryID, cloned_list);
                    requestRuns.put(prevQueryID, r);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * Reads the generated query file for a given query formulation, created by ConvertDryRunTasks,
     * and makes a Map of the generated queries, with request number as key.
     * @param queryFormulation The shorthand name of the query formulation.
     * @return Returns the Map of request number to generated query text.
     * @throws IOException
     * @throws ParseException
     */
    private Map<String,String> getGeneratedQueries(String queryFormulation) throws IOException, ParseException {
        Map<String, String> queriesMap = new HashMap<>();
        String filename = queriesFilesDirectory + "dry-run-topics.auto."
                + queryFormulation + ".queries.json";
        File tempFile = new File(filename);
        if (tempFile.exists()) {
            Reader reader = new BufferedReader(new InputStreamReader(
                    new FileInputStream(filename)));
            JSONParser parser = new JSONParser();
            JSONObject head = (JSONObject) parser.parse(reader);
            JSONArray queries = (JSONArray) head.get("queries");
            for (Object oRequest : queries) {
                JSONObject r = (JSONObject) oRequest;
                String reqNum = (String) r.get("number");
                String reqText = (String) r.get("text");
                queriesMap.put(reqNum, reqText);
            }
        }
        return queriesMap;
    }
}
